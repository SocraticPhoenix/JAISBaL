For the sake of convenience, a is used to refer to the top value of the stack, b is used to refer to the second value on the stack, c is used to refer to the third value on the stack, and so on.
Standard Instructions, 107 defined

|  ID  |  Main Alias       |  All Aliases               |  Explanation                                                                                                    |  Specification|
| ---- | ----------------- | -------------------------- | --------------------------------------------------------------------------------------------------------------- ||
| p    | pushnum           | pushnum, p                 | push ${arg} onto the stack                                                                                      | Pushes a number onto the stack. This instruction takes one argument, a number, and continues reading the argument until the number literal terminates                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| u    | pushterm          | pushterm, u                | push ${arg} onto the stack                                                                                      | Pushes any value onto the stack. This instruction takes one argument, and continues reading the argument until the '}' terminating character is found. '}' can be escaped or nested in [] to allow it to be used in the value itself                                                                                                                                                                                                                                                                                                                                                                                                |
| h    | push1             | push1, h                   | push ${arg} onto the stack                                                                                      | Pushes the given argument onto the stack. The argument is considered to be the next 1 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| m    | push2             | push2, m                   | push ${arg} onto the stack                                                                                      | Pushes the given argument onto the stack. The argument is considered to be the next 2 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| t    | push3             | push3, t                   | push ${arg} onto the stack                                                                                      | Pushes the given argument onto the stack. The argument is considered to be the next 3 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| e    | push4             | push4, e                   | push ${arg} onto the stack                                                                                      | Pushes the given argument onto the stack. The argument is considered to be the next 4 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| r    | push5             | push5, r                   | push ${arg} onto the stack                                                                                      | Pushes the given argument onto the stack. The argument is considered to be the next 5 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| l    | push6             | push6, l                   | push ${arg} onto the stack                                                                                      | Pushes the given argument onto the stack. The argument is considered to be the next 6 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| o    | printnum          | printnum, o                | print ${arg}                                                                                                    | Pushes a number onto the stack (see pushnum), and then pops and prints the number|
| w    | printterm         | printterm, w               | print ${arg}                                                                                                    | Pushes any value onto the stack (see pushterm), and then pops and prints the value|
| d    | print1            | print1, d                  | print ${arg}                                                                                                    | Pushes the given argument onto the stack, then pops and prints it. The argument is considered to be the next 1 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| c    | print2            | print2, c                  | print ${arg}                                                                                                    | Pushes the given argument onto the stack, then pops and prints it. The argument is considered to be the next 2 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| b    | print3            | print3, b                  | print ${arg}                                                                                                    | Pushes the given argument onto the stack, then pops and prints it. The argument is considered to be the next 3 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| v    | print4            | print4, v                  | print ${arg}                                                                                                    | Pushes the given argument onto the stack, then pops and prints it. The argument is considered to be the next 4 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| &    | print5            | print5, &                  | print ${arg}                                                                                                    | Pushes the given argument onto the stack, then pops and prints it. The argument is considered to be the next 5 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| q    | print6            | print6, q                  | print ${arg}                                                                                                    | Pushes the given argument onto the stack, then pops and prints it. The argument is considered to be the next 6 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| g    | printnumln        | printnumln, g              | print ${arg}                                                                                                    | Pushes a number onto the stack (see pushnum), and then pops and prints the number, followed by a newline|
| x    | printtermln       | printtermln, x             | print ${arg}                                                                                                    | Pushes any value onto the stack (see pushterm), and then pops and prints the value, followed by a newline|
| k    | println1          | println1, k                | print ${arg} followed by a new line                                                                             | Pushes the given argument onto the stack, then pops and prints it, followed by a new line. The argument is considered to be the next 1 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| y    | println2          | println2, y                | print ${arg} followed by a new line                                                                             | Pushes the given argument onto the stack, then pops and prints it, followed by a new line. The argument is considered to be the next 2 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| j    | println3          | println3, j                | print ${arg} followed by a new line                                                                             | Pushes the given argument onto the stack, then pops and prints it, followed by a new line. The argument is considered to be the next 3 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| A    | println4          | println4, A                | print ${arg} followed by a new line                                                                             | Pushes the given argument onto the stack, then pops and prints it, followed by a new line. The argument is considered to be the next 4 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| B    | println5          | println5, B                | print ${arg} followed by a new line                                                                             | Pushes the given argument onto the stack, then pops and prints it, followed by a new line. The argument is considered to be the next 5 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| D    | println6          | println6, D                | print ${arg} followed by a new line                                                                             | Pushes the given argument onto the stack, then pops and prints it, followed by a new line. The argument is considered to be the next 6 character(s) after this instruction                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| E    | pop               | pop, E                     | pop the top value off the stack                                                                                 | Pops the top value off the stack|
| G    | popall            | popall, G                  | clear the stack                                                                                                 | Pops every value off the stack|
| H    | swap              | swap, H                    | swap the top two values of the stack                                                                            | Pops the top two values off the stack, and then pushes them in reverse order|
| I    | duplicate         | dup, duplicate, I          | duplicate the top value of the stack                                                                            | Pops the top value off the stack, and then pushes it twice|
| J    | duplicateall      | dupall, duplicateall, J    | duplicate the entire stack                                                                                      | Pops the entire stack, and then pushes every value to the stack, twice. For example, if the stack was [1, 2, 3], it would become [1, 2, 3, 1, 2, 3]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| K    | store             | store, K                   | store the top value of the stack into var${arg}                                                                 | Pops the top value off the stack and stores it in the given var. This instruction takes one argument, a number (see pushnum). This instruction is only succesful if the argument is a 64-bit integer                                                                                                                                                                                                                                                                                                                                                                                                                                |
| L    | sstore            | sstore, L                  | store the second value in the stack at var<top value of stack>                                                  | Pops the top two values off the stack, and stores b in var a. This instruction is only successful if a is a 64-bit integer                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| M    | load              | load, M                    | push the value in var${arg} onto the stack                                                                      | Pushes the value in the given var onto the stack. This instruction takes on argument, a number (see pushnum). This instruction is only succesful if the argument is a 64-bit integer                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| N    | sload             | sload, N                   | push the value in var<top value of stack> onto the stack                                                        | Pops the top value off the stack and loads the value in var a onto the stack. This instruction is only succesful if a is a 64-bit integer                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| O    | storeall          | storeall, O                | store entire stack in var0 through var<stack size>                                                              | Pops every value off the stack, and stores it in a var. The first pop is stored in var <size of stack>, and the second is stored in the next var, and so on, until var 0 is reached. This is implemented as such so that a call to storeall, followed by a call to loadall, does not alter the stack                                                                                                                                                                                                                                                                                                                                |
| P    | loadall           | loadall, P                 | load all variables onto the stack                                                                               | Loads every value from vars onto the stack, starting at the lowest var index and continuing to the highest|
| Q    | storeloadall      | storeloadall, Q            | store all variables on the stack, then load all variables                                                       | Stores all variables and then loads all variables (see loadall and storeall|
| R    | popout            | popout, R                  | pop the top value of a stack and print it                                                                       | Pops the top value off the stack and prints it|
| S    | popoutln          | popoutln, S                | pop the top value off a stack and print it with a new line                                                      | Pops the top value off the stack and prints it, followed by a new line|
| T    | popoutall         | popoutall, T               | pop off every value in the stack and print it                                                                   | Pops every value off the stack, and prints each one|
| U    | popoutallln       | popoutallln, U             | pop off every value in the stack and print each one with a new line                                             | Pops every value off the stack, and prints each one on a separate line|
| V    | ln                | ln, V                      | print a new line                                                                                                | Prints a newline|
| W    | pushln            | pushln, W                  | push a new line                                                                                                 | Pushes a newline onto the stack|
| X    | concatln          | concatln, X                | push a new line and concatenate                                                                                 | Pushes a new line and then concatenates the top two values of the stack (see concat|
| Y    | space             | space, Y                   | print a space                                                                                                   | Prints a space|
| Z    | pushspace         | pushspace, Z               | push a space                                                                                                    | Pushes a space onto the stack|
| z    | concatspace       | concatspace, z             | push a space and concatenate                                                                                    | Pushes a space and then concatenates the top two values of the stack (see concat|
| ª    | tab               | tab, ª                     | print a tab                                                                                                     | Prints a tab|
| µ    | pushtab           | pushtab, µ                 | push a tab                                                                                                      | Pushes a tab onto the stack|
| º    | concattab         | concattab, º               | push a tab and concatenate                                                                                      | Pushes a tab and then concatenates the top two values of the stack (see concat|
| *    | mul               | *, mul                     | multiply the top two values of the stack                                                                        | Multiplies a and b. If a and b are both numbers, normal multiplication will occur. If either a or b is an array, and the other is a non-array, every value in the array will be multiplied by the other value. If either a or b is a string, and the other is a number, the string will be duplicated <number> times. If both a and b are strings, the number of characters in a which are also in b will be pushed. Finally, if both values are arrays, a new array will be created with the length of the longer array, and every value in the new array will be the result of multiplication of same-indexed values in a and b   |
| /    | div               | /, div                     | divide the top value of the stack by the second value on the stack                                              | Divides a by b. If a and b are both numbers, normal division will occur. If either a or b is an array, and the other is a non-array, every value in the array will be divided by the other value. If a or b is a string, and the other is a number, a and b will both be converted to strings and divided. If a and b are both strings, the number of characters in a which are not in b will be pushed. Finally, if both values are arrays, a new array will be created with the length of the smaller array, and every value in the array will be the result of division of same-indexed values in a and b                        |
| +    | add               | +, add                     | add the top two values of the stack                                                                             | Adds a and b. If a and b are both numbers, normal addition will occur. If either a or b is an array, and the other is a non-array, the other value will be added to every value in the array. If a or b is a string, and the other is a number, a and b will both be converted to strings and added. If a and b are strings, the length of the longest substring of a that is also present in b will be pushed. Finally, if both values are arrays, a new array will be created with a length of the longer array, and every value in the new array will be the result of addition of same-indexed values in a and b                |
| -    | sub               | -, sub                     | subtract the second value on the stack from the top value on the stack                                          | Subtracts b from a. If a and b are both numbers, normal subtraction will occur. If either a or b is an array, and the other is a non-array, the other value will be subtracted from every value in the array. If a or b is a string, and the other is a number, a and b will both be converted to strings and subtracted. If a and b are strings, the number of times b occurs in a will be pushed. Finally, if both values are arrays, a new array will be created with a length of the smaller array, and ever value in the new array will be the result of subtraction of same-indexed values in a and b                         |
| À    | reverse           | reverse, À                 | reverse the top value of the stack                                                                              | Pops the top value off the stack and reverses it. If the a is a number or string, it will be converted to a string and the order of characters will be reversed. If a is an array, the order of elements will be reversed                                                                                                                                                                                                                                                                                                                                                                                                           |
| Á    | concat            | concat, &+, Á              | concatenate the top two values of the stack                                                                     | Concatenates a and b. If a and b are both numbers, both strings, or one of each, they will be converted to strings and concatenate using string concatenation. If a or b is an array, and the other is a non array, the non array will be prepended (if a is non-rray) or appended (if b is non array). If both a and b are arrays, list concatenation will be used to join a and b                                                                                                                                                                                                                                                 |
| Â    | split             | split, Â                   | split the top value of the stack by ${arg}                                                                      | Splits the top value of the stack by the given regex, and pushes the array result. This instruction takes one argument, terminated by '}' (see pushterm). This instruction is only succesful if the top value of the stack is a string or number                                                                                                                                                                                                                                                                                                                                                                                    |
| ^    | pow               | pow, ^                     | raise the top value on the stack to the second value on the stack                                               | Raises a to b. This instruction is only succesful if the top two values of the stack are numbers. Furthermore, accurate results can only be calculated for numbers that fit in 32-bits                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| %    | mod               | mod, %                     | calculate the modulus of the top value on the stack by the second value on the stack                            | Calculates a mod b. This instruction is only succesful if the top two values of the stack are integers|
| Ã    | floor             | floor, Ã                   | floor the top value of the stack                                                                                | Calculates floor a. This instruction is only succesful if the top value of the tack is a number|
| Ä    | ceil              | ceil, Ä                    | ceil the top value of the stack                                                                                 | Calculates ceil a. This instruction is only succesful if the top value of the tack is a number|
| Å    | round             | round, Å                   | round the top value of the stack                                                                                | Calculates round a (traditional rounding). This instruction is only succesful if the top value of the stack is a number                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| Æ    | sqrt              | sqrt, Æ                    | compute the square root of the top value on the stack                                                           | Computes the square root of a, and pushes it to the stack. This instruction fails if a is not a number|
| Ç    | arg               | arg, Ç                     | set the current context arg to ${arg}                                                                           | Sets the current program argument to the one specified. This instruction takes one argument, terminated by '}' (see pushterm)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |
| C    | const             | C, const                   | load auxiliary constant #${arg}                                                                                 | Pushes the auxiliary constant registered at the specified index onto the stack, This instruction takes on argument, a number (see pushnum)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| F    | aux               | F, aux                     | call auxiliary instruction #${arg}                                                                              | Calls the auxiliary instruction registered at the specified index. This instruction takes one argument, a number (see pushnum)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| È    | for               | for, È                     | start for loop                                                                                                  | This instruction pops a number of the stack, and executes the for loop body floor a times. This instruction also opens a new function frame. This instructions is only succesful if the top value on the stack is a number                                                                                                                                                                                                                                                                                                                                                                                                          |
| É    | end               | end, É                     | end current language construct                                                                                  | Ends a loop, if, ifelse, or other statement|
| Ê    | break             | break, Ê                   | break out of the current function frame                                                                         | Breaks out of the current function frame                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| Ë    | newarray          | newarray, Ë                | create and push new array with length ${arg}                                                                    | Creates a new array with the given length. This instruction takes one argument, a number (see pushnum|
| Ì    | arrayload         | arrayload, aload, Ì        | load a value from an array, using the top value of the stack as an index                                        | Loads a value from array a, from the specified index. This instruction does not pop of the array. This instruction takes one argument, a number (see pushnum). This instruction is only succesful if a is an array, and the argument given is a 32-bit integer that is an index of a                                                                                                                                                                                                                                                                                                                                                |
| Í    | arraystore        | arraystore, astore, Í      | store the top of the stack at index ${arg} in an array                                                          | Stores value a in array b, at the specified index. This instruction does not pop of the array. This instruction takes on argument, a number (see pushnum). This instruction is only succesful if b is an array, and the argument given is a 32-bit integer that is an index of b                                                                                                                                                                                                                                                                                                                                                    |
| Î    | snewarray         | snewarray, Î               | create and push new array with length <top value of stack>                                                      | Creates a new array with the length a. This instruction fails if a is not a 32-bit integer index|
| Ï    | sarrayload        | sarrayload, saload, Ï      | load the value at index ${arg} from an array                                                                    | Loads a value from array b, at index a. This instruction does not pop of the array. This instruction is only succesful if b is an array and a is a 32-bit integer that is an index in b                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| Ð    | sarraystore       | sarraystore, sastore, Ð    | store the second value in the stack in an array, using the top value of the stack as an index                   | Stores value b in array c at index a. This instruction does not pop of the array. This instruction is only succesful if c is an array and a is 32-bit integer that is an index in b                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Ñ    | arraylength       | arraylength, alength, Ñ    | push the length of the array onto the stack                                                                     | Pushes the length of array a onto the stack. This instruction does not pop of the array. This instruction fails if a is not an array                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| Ò    | sort              | sort, Ò                    | pop the top value of the stack, sort it, and push it                                                            | Pops the top value off the stack and sorts it from smallest to largest (see compare). This instruction fails if a is not an array                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| Ó    | rsort             | rsort, Ó                   | pop the top value of the stack, sort it, reverse it, and push it                                                | Pops the top value off the stack and sorts it from largest to smallest (see compare). This instruction fails if a is not an array                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| Ô    | true              | true, Ô                    | push a truthy value onto the stack                                                                              | Pushes 1, a truthy value, onto the stack|
| Õ    | false             | false, Õ                   | push a falsy value onto the stack                                                                               | Pushes 0, a falsy value, onto the stack|
| !    | negate            | !, negate                  | negate the top value of the stack                                                                               | Pops the current value of the stack, if the values is truthy, this instruction pushes a falsy value, otherwise this instruction pushes a truthy value (see if)                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| Ö    | if                | if, Ö                      | if the top value on the stack is truthy, skip the next statement                                                | Pops the top value of the stack. If a is truthy, skip the next statement. If a is a number, it is truthy if it is greater than 0. If a is a string, it is truthy if it equals "true," "t" or "yes." If a is an array, it is truthy if it contains more truthy values than falsy ones                                                                                                                                                                                                                                                                                                                                                |
| Ø    | !if               | !if, Ø                     | if the top value on the stack is falsy, skip the next statement                                                 | Pops the top value of the stack. If a is not truthy, skip the next statement (see if|
| Ù    | compare           | compare, Ù                 | compare the top value of the stack with the second value on the stack                                           | Compares a and b and pushes a: positive int if a > b, negative int if b < a, and 0 if a = b. If a or b is an array, and the other value is a non-array, the array value will be considered larger. If a and b are both numbers, a mathematical comparison takes place. If both a and b are arrays, the comparison is calculated by initializing a single int variable, and consecutivley comparing each value of the arrays, then the difference between a.length and b.length is added to the variable. If a and b are both strings, lexical comparison takes place                                                                |
| =    | equal             | =, equal                   | skip the next statement if the top two values on the stack are equal                                            | Skips the next instruction if a and b are equal (see compare|
| Ú    | equalall          | &=, equalall, Ú            | skip the next statement if all values on the stack are equal                                                    | Consecutively pops every value of the stack, checks if it is equal to the previously popped value, and ANDs the boolean result to a single boolean. If the final boolean is true, the next instruction is skipped (see compare)                                                                                                                                                                                                                                                                                                                                                                                                     |
| Û    | notequal          | !=, notequal, Û            | skip the next statement if the two top values on the stack are not equal                                        | Skips the next instruction if a and b are not equal (see compare|
| Ü    | notequalall       | &!=, notequalall, Ü        | skip the next statement if no values on the stack are equal                                                     | Consecutively pops every value of the stack, checks if it is not equal to the previously popped value, and ANDs the boolean result to a single boolean. If the final boolean is true, the next instruction is skipped (see compare)                                                                                                                                                                                                                                                                                                                                                                                                 |
| >    | greater           | >, greater                 | skip the next statement if the top value on the stack is greater than the next value on the stack               | Skips the next instruction if a > b (see compare|
| Ý    | greaterall        | &>, greaterall, Ý          | skip the next statement if the values on the stack are in smalles to greatest order, with no duplicates         | Consecutively pops every value of the stack, checks if it is > the previously popped value, and ANDs the boolean result to a single boolean. If the final boolean is true, the next instruction is skipped (see compare)                                                                                                                                                                                                                                                                                                                                                                                                            |
| <    | less              | <, less                    | skip the next statement if the top value on the stack is less than the next value on the stack                  | Skips the next instruction if a < b (see compare|
| Þ    | lessall           | &<, lessall, Þ             | skip the next statement if the values on the stack are in greatest to smallest order, with no duplicates        | Consecutively pops every value of the stack, checks if it is < the previously popped value, and ANDs the boolean result to a single boolean. If the final boolean is true, the next instruction is skipped (see compare)                                                                                                                                                                                                                                                                                                                                                                                                            |
| ß    | greaterequal      | >=, greaterequal, ß        | skip the next statement if the top value on the stack is greater than or equal to the next value on the stack   | Skips the next instruction if a >= b (see compare)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| à    | greaterequalall   | &>=, greaterequalall, à    | skip the next statement if the values on the stack are in smallest to greatest order                            | Consecutively pops every value of the stack, checks if it is >= the previously popped value, and ANDs the boolean result to a single boolean. If the final boolean is true, the next instruction is skipped (see compare)                                                                                                                                                                                                                                                                                                                                                                                                           |
| á    | lessequal         | <=, lessequal, á           | skip the next statement if the top value on the stack is less than the next value on the stack                  | Skips the next instruction if a <= b (see compare|
| â    | lessequalall      | &<=, lessequalall, â       | skip the next statement if the values on the stack are in greatest to smallest order                            | Consecutively pops every value of the stack, checks if it is <= the previously popped value, and ANDs the boolean result to a single boolean. If the final boolean is true, the next instruction is skipped (see compare)                                                                                                                                                                                                                                                                                                                                                                                                           |
| ã    | ifblock           | ifblock, ã                 | if the top value of the stack is truthy, execute the next block                                                 | Pops the top value of the stack. If a is truthy, run the block (see if). This instruction also opens a new function frame                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| ä    | ifelse            | ifelse, ä                  | if the top value of the stack is truthy, execute the next block, otherwise, execute the else block              | Pops the top value of the stack. If a is truthy, run the  if block, otherwise run the else block (see if). This instruction also opens a new function frame                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| å    | else              | else, å                    | end the truthy section of the ifelse block                                                                      | The end of an ifelse's if block, and the beginning of it's else block|
| æ    | superpush         | superpush, æ               | pop the top value of the stack and push it to the parent stack                                                  | Pops the top value of the stack and pushes it to the parent function frame's stack|
| ç    | jump              | jump, ç                    | jump ${arg} instructions                                                                                        | Jumps the given amount of instructions forward. The argument may be positive or negative, and the jump will likewise be forwards or backwards. This instruction takes one argument, a number (see pushnum). This instruction fails of the argument is not a 32-bit integer                                                                                                                                                                                                                                                                                                                                                          |
| è    | indexjump         | indexjump, è               | jump to instruction ${arg}                                                                                      | Jumps to the instruction at the given index. This instruction takes one argument, a number (see pushnum). This instruction fails if the argument is not a 32-bit integer                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| é    | triplicate        | tri, triplicate, é         | triplicate the top value of the stack                                                                           | Pops the top value off the stack, and then pushes it thrice|
| ê    | triplicateall     | triall, triplicateall, ê   | triplicate the entire stack                                                                                     | Pops the entire stack, and then pushes every value to the stack, thrice. For example, if the stack was [1, 2], it would become [1, 2, 1, 2, 1, 2]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| ë    | popsplitpush      | popsplitpush, ë            | take the top value off the stack, split it up, and push each piece                                              | Pops the top value off the stack, splits it, and pushes each piece onto the stack. If the top value is a string or number, it will be converted to a string, and each character of the string will be pushed. If the top value is an array, the values in the array will be pushed in reverse order                                                                                                                                                                                                                                                                                                                                 |
| ì    | quine             | quine, ì                   | load the source code of the program onto the stack                                                              | Pushes the programs source code, as a string, onto the stack|
| f    | call              | f, call                    | call function ${arg}                                                                                            | Calls the given function. This instruction takes one argument, terminated by '}' (see pushterm). This instruction fails if the given argument is not a string, or if no function exists for the given name                                                                                                                                                                                                                                                                                                                                                                                                                          |
| í    | name              | name, í                    | take the top value off the stack, determines its name, and push it                                              | Determines the name of the top value on the stack. If a is a 32-bit integer, a string representation of it's number name is returned, if a is an array, the name of every value in the array is computed, and pushed as a single array. Otherwise, the string value of a is pushed                                                                                                                                                                                                                                                                                                                                                  |

Supplementary Instructions, 0 defined

|  ID  |  Main Alias  |  All Aliases  |  Explanation  |  Specification  |
| ---- | ------------ | ------------- | ------------- | --------------- |

Standard Constants, 0 defined

|  ID  |  Main Alias  |  All Aliases  |  Value  |  Explanation  |  Specification  |
| ---- | ------------ | ------------- | ------- | ------------- | --------------- |

Auxiliary Instructions, 0 defined

|  ID  |  Main Alias  |  All Aliases  |  Explanation  |  Specification  |
| ---- | ------------ | ------------- | ------------- | --------------- |

Auxiliary Constants, 0 defined

|  ID  |  Value  |
| ---- | ------- |
